update_selenium_app_stack = ENV.fetch('UPDATE_SELENIUM_APP_STACK', '')
basedir = ENV.fetch('USERPROFILE', '')
basedir = ENV.fetch('HOME', '') if basedir == ''
box_memory = ENV.fetch('BOX_MEMORY', '2048').to_i
basedir = basedir.gsub('\\', '/')
selenium_version = ENV.fetch('SELENIUM_VERSION', '2.47')
chromedriver_version = ENV.fetch('CHROMEDRIVER_VERSION', '2.16')

# standalone ubuntu box with tmux-driven selenium server, Chrome, Firefox and autologin
# origin : https://github.com/Anomen/vagrant-selenium/blob/master/script.sh

VAGRANTFILE_API_VERSION = '2'
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = 'ubuntu/trusty64'
  config_vm_box_name ='trusty-server-cloudimg-amd64-vagrant-disk1.box'
  config_vm_box_name = 'trusty-server-amd64-vagrant-selenium.box'
  config.vm.box_url = "file://#{basedir}/Downloads/#{config_vm_box_name}" 

  config.vm.network :forwarded_port, guest:4444, host:4444
  config.vm.network :private_network, ip: '192.168.33.10'

  config.vm.provision 'shell', inline: <<-END_OF_SHELL_PROVISION

#!/bin/sh
#=========================================================
UPDATE_SELENIUM_APP_STACK='#{update_selenium_app_stack}'

#=========================================================
echo "Install the packages..."
#=========================================================
sudo apt-get update
sudo apt-get -qqy install fluxbox xorg unzip vim default-jre rungetty firefox wget

#=========================================================
echo "Set autologin for the Vagrant user..."
#=========================================================
sudo sed -i '$ d' /etc/init/tty1.conf
sudo echo "exec /sbin/rungetty --autologin vagrant tty1" >> /etc/init/tty1.conf

#=========================================================
echo -n "Start X on login..."
#=========================================================
cat <<EOF>> .profile
if [ ! -e "/tmp/.X0-lock" ] ; then
  startx
fi
EOF

if [ $UPDATE_SELENIUM_APP_STACK != '' ] ; then


  SELENIUM_VERSION='#{selenium_version}'
  if [ $SELENIUM_VERSION == '' ] 
  then
    #=========================================================
    echo "Download latest selenium server..."
    #=========================================================
    SELENIUM_RELEASE=$(curl -# "https://selenium-release.storage.googleapis.com/" | perl -n -e'/.*<Key>([^>]+selenium-server-standalone[^<]+)/ && print $1')
  else
    #=========================================================
    echo "Download selenium server version ${SELENIUM_VERSION} ..."
    #=========================================================
    RELEASE_REGEX=$(echo "/.*<Key>(${SELENIUM_VERSION}[^>]+selenium-server-standalone[^<]+)/&& print \\$1")
    SELENIUM_RELEASE=$(curl -# "https://selenium-release.storage.googleapis.com/" | perl -n -e"${RELEASE_REGEX}")
  fi
  echo "Downloading Selenium from \\"https://selenium-release.storage.googleapis.com/${SELENIUM_RELEASE}\\""
  wget -nv -O selenium-server-standalone.jar "https://selenium-release.storage.googleapis.com/${SELENIUM_RELEASE}" 
  chown vagrant:vagrant selenium-server-standalone.jar

  #=========================================================
  echo "Download the latest chrome..."
  #=========================================================
  wget -nv "https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
  sudo dpkg -i google-chrome-stable_current_amd64.deb
  sudo rm google-chrome-stable_current_amd64.deb
  sudo apt-get install -qqy -f google-chrome-stable

  # wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - 
  # sudo sh -c 'echo "deb https://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
  # sudo apt-get update
  # sudo apt-get install google-chrome-stable
  # https://dw.uptodown.com/dwn/gTqQucBStVTk-lzILoc3LH9BeK-I0eeLsW8MZ9xlkCocDgWjO_nIdOJmFyavzkKZY2MfGCwi0gvMiiIKXn7g7dhyrUwHEkpnQMKqEHHTv7AfYvz41pwVGcIQj4X6LY8Y/guJv-QUCwm9Cdi_c5x2rhzJ7qxoE-A8F3iVoqCQy7RFQSI4gyEFLnd0V0dv8sXQRvTGZZ7F0h73RPozajVPIQvZvrHfqMD6rwuwmWeqhbbzQSu-HfrnqsmuIqhPvd4V0/orMuiQ0WyDLZrd6UmgOxN8vQoO5zhcTLijMTXBpu3c9drIZ7NlrEiNvjwCpFa5gBDVNxZA581d8RsFkdfTBMmTmfqIfOamDrjiHoGDqFLzjwcHUopCi_UPL8PQgn4UAr/7-MijyptygWBa73iL5GR-XvCctvGO7N2oJHsLnI7LKc=/
  #=========================================================
  #=========================================================
  # 
  CHROMEDRIVER_VERSION='#{chromedriver_version}'
  if [ $CHROMEDRIVER_VERSION == '' ] 
  then
    echo 'Download latest chrome driver...'
    CHROMEDRIVER_VERSION=$(curl -# "http://chromedriver.storage.googleapis.com/LATEST_RELEASE")
  else
    echo "Download chrome driver version ${CHROMEDRIVER_VERSION} ..."
  fi
  wget -nv "http://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
  unzip -fo chromedriver_linux64.zip
  sudo rm chromedriver_linux64.zip
  chown vagrant:vagrant chromedriver
fi

# options for java runtime.
export LAUNCHER_OPTS='-Xmn512M -Xms1G -Xmx1G'

#=========================================================
echo -n 'Install tmux scripts...'
#=========================================================
cat <<EOF> tmux.sh
#!/bin/sh
tmux start-server

tmux new-session -d -s chrome-driver
tmux send-keys -t chrome-driver:0 './chromedriver' C-m

tmux new-session -d -s selenium
tmux send-keys -t selenium:0 'java $LAUNCHER_OPTS -jar selenium-server-standalone.jar' C-m
tmux send-keys -t selenium:0 'for cnt in {0..10}; do wget -O- http://127.0.0.1:4444/wd/hub;  done' C-m

EOF
chmod +x tmux.sh
chown vagrant:vagrant tmux.sh

#=========================================================
echo -n "Install startup scripts..."
#=========================================================
cat <<EOF> /etc/X11/Xsession.d/9999-common_start
#!/bin/sh
~/tmux.sh &
xterm -fa fixed &
EOF
chmod +x /etc/X11/Xsession.d/9999-common_start

#=========================================================
echo -n "Add host alias..."
#=========================================================
echo '192.168.33.1 host'| tee /etc/hosts

#=========================================================
echo "Reboot the VM"
#=========================================================
sudo reboot

  END_OF_SHELL_PROVISION

  config.vm.provider :virtualbox do |vb|
    vb.gui = true
    vb.customize ['modifyvm', :id, '--memory', box_memory ]
    vb.customize ['setextradata', 'global', 'GUI/MaxGuestResolution', 'any']
    vb.customize ['setextradata', :id, 'CustomVideoMode1', '1280x960x32']
# supported by fluxbox
  end
end

